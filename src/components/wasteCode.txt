./CreateTasks.jsx

const suggestions = [
  { label: 'Afghanistan' },
  { label: 'Aland Islands' },
  { label: 'Albania' },
  { label: 'Algeria' },
  { label: 'American Samoa' },
  { label: 'Andorra' },
  { label: 'Angola' },
  { label: 'Anguilla' },
  { label: 'Antarctica' },
  { label: 'Antigua and Barbuda' },
  { label: 'Argentina' },
  { label: 'Armenia' },
  { label: 'Aruba' },
  { label: 'Australia' },
  { label: 'Austria' },
  { label: 'Azerbaijan' },
  { label: 'Bahamas' },
  { label: 'Bahrain' },
  { label: 'Bangladesh' },
  { label: 'Barbados' },
  { label: 'Belarus' },
  { label: 'Belgium' },
  { label: 'Belize' },
  { label: 'Benin' },
  { label: 'Bermuda' },
  { label: 'Bhutan' },
  { label: 'Bolivia, Plurinational State of' },
  { label: 'Bonaire, Sint Eustatius and Saba' },
  { label: 'Bosnia and Herzegovina' },
  { label: 'Botswana' },
  { label: 'Bouvet Island' },
  { label: 'Brazil' },
  { label: 'British Indian Ocean Territory' },
  { label: 'Brunei Darussalam' },
].map(suggestion => ({
  value: suggestion.label,
  label: suggestion.label,
}));

function NoOptionsMessage(props) {
  return (
    <Typography
      color="textSecondary"
      className={props.selectProps.classes.noOptionsMessage}
      {...props.innerProps}
    >
      {props.children}
    </Typography>
  );
}

NoOptionsMessage.propTypes = {
  /**
   * The children to be rendered.
   */
  children: PropTypes.node,
  /**
   * Props to be passed on to the wrapper.
   */
  innerProps: PropTypes.object.isRequired,
  selectProps: PropTypes.object.isRequired,
};

function inputComponent({ inputRef, ...props }) {
  return <div ref={inputRef} {...props} />;
}

inputComponent.propTypes = {
  inputRef: PropTypes.oneOfType([
    PropTypes.func,
    PropTypes.shape({
      current: PropTypes.any.isRequired,
    }),
  ]),
};

function Control(props) {
  const {
    children,
    innerProps,
    innerRef,
    selectProps: { classes, TextFieldProps },
  } = props;

  return (
    <TextField
      fullWidth
      InputProps={{
        inputComponent,
        inputProps: {
          className: classes.input,
          ref: innerRef,
          children,
          ...innerProps,
        },
      }}
      {...TextFieldProps}
    />
  );
}

Control.propTypes = {
  /**
   * Children to render.
   */
  children: PropTypes.node,
  /**
   * The mouse down event and the innerRef to pass down to the controller element.
   */
  innerProps: PropTypes.shape({
    onMouseDown: PropTypes.func.isRequired,
  }).isRequired,
  innerRef: PropTypes.oneOfType([
    PropTypes.oneOf([null]),
    PropTypes.func,
    PropTypes.shape({
      current: PropTypes.any.isRequired,
    }),
  ]).isRequired,
  selectProps: PropTypes.object.isRequired,
};

function Option(props) {
  return (
    <MenuItem
      ref={props.innerRef}
      selected={props.isFocused}
      component="div"
      style={{
        fontWeight: props.isSelected ? 500 : 400,
      }}
      {...props.innerProps}
    >
      {props.children}
    </MenuItem>
  );
}

Option.propTypes = {
  /**
   * The children to be rendered.
   */
  children: PropTypes.node,
  /**
   * props passed to the wrapping element for the group.
   */
  innerProps: PropTypes.shape({
    id: PropTypes.string.isRequired,
    key: PropTypes.string.isRequired,
    onClick: PropTypes.func.isRequired,
    onMouseMove: PropTypes.func.isRequired,
    onMouseOver: PropTypes.func.isRequired,
    tabIndex: PropTypes.number.isRequired,
  }).isRequired,
  /**
   * Inner ref to DOM Node
   */
  innerRef: PropTypes.oneOfType([
    PropTypes.oneOf([null]),
    PropTypes.func,
    PropTypes.shape({
      current: PropTypes.any.isRequired,
    }),
  ]).isRequired,
  /**
   * Whether the option is focused.
   */
  isFocused: PropTypes.bool.isRequired,
  /**
   * Whether the option is selected.
   */
  isSelected: PropTypes.bool.isRequired,
};

function Placeholder(props) {
  const { selectProps, innerProps = {}, children } = props;
  return (
    <Typography color="textSecondary" className={selectProps.classes.placeholder} {...innerProps}>
      {children}
    </Typography>
  );
}

Placeholder.propTypes = {
  /**
   * The children to be rendered.
   */
  children: PropTypes.node,
  /**
   * props passed to the wrapping element for the group.
   */
  innerProps: PropTypes.object,
  selectProps: PropTypes.object.isRequired,
};

function SingleValue(props) {
  return (
    <Typography className={props.selectProps.classes.singleValue} {...props.innerProps}>
      {props.children}
    </Typography>
  );
}

SingleValue.propTypes = {
  /**
   * The children to be rendered.
   */
  children: PropTypes.node,
  /**
   * Props passed to the wrapping element for the group.
   */
  innerProps: PropTypes.any.isRequired,
  selectProps: PropTypes.object.isRequired,
};

function ValueContainer(props) {
  return <div className={props.selectProps.classes.valueContainer}>{props.children}</div>;
}

ValueContainer.propTypes = {
  /**
   * The children to be rendered.
   */
  children: PropTypes.node,
  selectProps: PropTypes.object.isRequired,
};

function MultiValue(props) {
  return (
    <Chip
      tabIndex={-1}
      label={props.children}
      className={clsx(props.selectProps.classes.chip, {
        [props.selectProps.classes.chipFocused]: props.isFocused,
      })}
      onDelete={props.removeProps.onClick}
      deleteIcon={<CancelIcon {...props.removeProps} />}
    />
  );
}

MultiValue.propTypes = {
  children: PropTypes.node,
  isFocused: PropTypes.bool.isRequired,
  removeProps: PropTypes.shape({
    onClick: PropTypes.func.isRequired,
    onMouseDown: PropTypes.func.isRequired,
    onTouchEnd: PropTypes.func.isRequired,
  }).isRequired,
  selectProps: PropTypes.object.isRequired,
};

function Menu(props) {
  return (
    <Paper square className={props.selectProps.classes.paper} {...props.innerProps}>
      {props.children}
    </Paper>
  );
}

Menu.propTypes = {
  /**
   * The children to be rendered.
   */
  children: PropTypes.element.isRequired,
  /**
   * Props to be passed to the menu wrapper.
   */
  innerProps: PropTypes.object.isRequired,
  selectProps: PropTypes.object.isRequired,
};

const components = {
  Control,
  Menu,
  MultiValue,
  NoOptionsMessage,
  Option,
  Placeholder,
  SingleValue,
  ValueContainer,
};

<div className={classes.root}>
        <NoSsr>
          <div className={classes.divider} />
          <Select
            classes={classes}
            styles={selectStyles}
            inputId="react-select-multiple"
            TextFieldProps={{
              label: 'Assign People',
              InputLabelProps: {
                htmlFor: 'react-select-multiple',
                shrink: true,
              },
            }}
            placeholder="Select multiple people"
            options={suggestions}
            components={components}
            value={multi}
            onChange={handleChangeMulti}
            isMulti
          />
        </NoSsr>
      </div>

const [single, setSingle] = React.useState(null);
  const [multi, setMulti] = React.useState(null);

  function handleChangeSingle(value) {
    setSingle(value);
  }

  function handleChangeMulti(value) {
    setMulti(value);
  }

  const selectStyles = {
    input: base => ({
      ...base,
      color: theme.palette.text.primary,
      '& input': {
        font: 'inherit',
      },
    }),
  };

  const [selectedDate, setSelectedDate] = React.useState(new Date('2014-08-18T21:11:54'));

  const handleDateChange = (date) => {
    setSelectedDate(date);
  };
  const [radioValue, setValue] = React.useState('low');

  const handleRadioChange = (event) => {
    setValue(event.target.value);
  };
  const [typeState, setTypeState] = React.useState({
    type: '',
  });
  const inputLabel = React.useRef(null);
  const [labelWidth, setLabelWidth] = React.useState(0);
  React.useEffect(() => {
    setLabelWidth(inputLabel.current.offsetWidth);
  }, []);
  const handleTypeChange = type => (event) => {
    setTypeState({
      ...typeState,
      [type]: event.target.value,
    });
  };

<KeyboardDatePicker
                                disableToolbar
                                variant="inline"
                                format="MM/dd/yyyy"
                                margin="normal"
                                id="start_date"
                                label="Select Start Date of Event"
                                value={startDate}
                                onChange={startDateChange}
                                KeyboardButtonProps={{
                                  'aria-label': 'change date',
                                }}
                              />
{/* <Row className="form-group">
                          <FormLabel component="legend">Type of Item</FormLabel>
                          <RadioGroup row value={itemType}>
                            <FormControlLabel
                              value="event"
                              label="Event"
                              control={(
                                <Radio />
                            )}
                            />
                            <FormControlLabel
                              value="project"
                              label="Project"
                              control={(
                                <Radio />
                            )}
                            />
                            <FormControlLabel
                              value="resource"
                              label="Resource"
                              control={(
                                <Radio />
                          )}
                            />
                          </RadioGroup>
                        </Row>
                        <Row className="form-group">
                          <Label htmlFor="telnum" md={2}>Contact Tel.</Label>
                          <Col md={10}>
                            <Control.text
                              model=".telnum"
                              id="telnum"
                              name="telnum"
                              placeholder="Tel. Number"
                              className="form-control"
                              validators={{
                                required, minLength: minLength(3), maxLength: maxLength(15),
                              }}
                            />
                            <Errors
                              className="text-danger"
                              model=".telnum"
                              show="touched"
                              messages={{
                                required: 'Required',
                                minLength: 'Must be greater than 2 numbers',
                                maxLength: 'Must be 15 numbers or less',
                                isNumber: 'Must be a number',
                              }}
                            />
                          </Col>
                        </Row>
                        <Row className="form-group">
                          <Label htmlFor="email" md={2}>Email</Label>
                          <Col md={10}>
                            <Control.text
                              model=".email"
                              id="email"
                              name="email"
                              placeholder="Email"
                              className="form-control"
                              validators={{
                                required,
                              }}
                            />
                            <Errors
                              className="text-danger"
                              model=".email"
                              show="touched"
                              messages={{
                                required: 'Required',
                                validEmail: 'Invalid Email Address',
                              }}
                            />
                          </Col>
                        </Row>
                        <Row className="form-group">
                          <Col md={{ size: 6, offset: 2 }}>
                            <div className="form-check">
                              <Label check>
                                <Control.checkbox
                                  model=".agree"
                                  name="agree"
                                  className="form-check-input"
                                />
                                {' '}
                                {' '}
                                <strong>May we contact you?</strong>
                              </Label>
                            </div>
                          </Col>
                          <Col md={{ size: 3, offset: 1 }}>
                            <Control.select
                              model=".contactType"
                              name="contactType"
                              className="form-control"
                            >
                              <option>Tel.</option>
                              <option>Email</option>
                            </Control.select>
                          </Col>
                        </Row>
                        <Row className="form-group">
                          <Label htmlFor="message" md={2}>Your Feedback</Label>
                          <Col md={10}>
                            <Control.textarea
                              model=".message"
                              id="message"
                              name="message"
                              rows="12"
                              className="form-control"
                            />
                          </Col>
                        </Row> */}



<div className={classes.borderJ}>
      <Paper>
        <Grid className={classes.gcontainer} container justify="space-evenly">
          <Grid className={classes.gridL} item xs={10} sm={5}>
            <Typography className={classes.textPadding} variant="h4" align="center">
              Pending Tasks
            </Typography>
            <Typography variant="h1" align="center">
              {dumTasks.length}
            </Typography>
          </Grid>
          <Divider orientation="vertical" />
          <Grid className={classes.gridR} item xs={10} sm={5}>
            {/* <Typography>
                sfbwsgfb
            </Typography> */}
            <TableContainer className={classes.table}>
              <Table stickyHeader>
                <TableHead>
                  <TableRow>
                    <TableCell><b>Task Name</b></TableCell>
                    <TableCell align="right"><b>Deadline</b></TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {dumTasks.map(task => (
                    <TableRow hover key={task.name}>
                      <TableCell component="th" scope="row">
                        {task.name}
                      </TableCell>
                      <TableCell align="right">{task.deadline}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          </Grid>
        </Grid>
      </Paper>
      <Paper>
        <Grid className={classes.gcontainer} container justify="space-evenly">
          {/* <Divider orientation="vertical" /> */}
          <Grid className={classes.gridL} item xs={10} sm={5}>
            {/* <Typography>
                sfbwsgfb
            </Typography> */}
            <TableContainer className={classes.table}>
              <Table stickyHeader>
                <TableHead>
                  <TableRow>
                    <TableCell><b>Task Name</b></TableCell>
                    <TableCell align="right"><b>Deadline</b></TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {dumTasks.map(task => (
                    <TableRow hover key={task.name}>
                      <TableCell component="th" scope="row">
                        {task.name}
                      </TableCell>
                      <TableCell align="right">{task.deadline}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          </Grid>
          <Divider orientation="vertical" />
          <Grid className={classes.gridR} item xs={10} sm={5}>
            <Typography className={classes.textPadding} variant="h4" align="center">
              Completed Tasks
            </Typography>
            <Typography variant="h1" align="center">
              {dumTasks.length}
            </Typography>
          </Grid>
        </Grid>
      </Paper>
    </div>





<Card>
                                      <CardHeader>
                                        <Typography variant='h4'>{event.name}</Typography>
                                      </CardHeader>
                                      <CardBody>
                                        <CardTitle>
                                          <Typography variant='h6'>{`${event.start_date.toDateString()} - ${event.end_date.toDateString()}`}</Typography>
                                        </CardTitle>
                                        <CardText>
                                          <Typography variant='body1' >{event.description}</Typography>
                                          {
                                            Array.from(event.url).map(([key, value]) => {
                                              return(
                                                <Typography variant='body1'>{`${key}: `}<CardLink href={value}>{value}</CardLink></Typography>
                                              );
                                            })
                                          }
                                          Assigned to: {event.assignee !== '' ? event.assignee: 'None'}
                                        </CardText>
                                      </CardBody>
                                      <CardFooter>
                                        <LocalForm>
                                          <Row className="form-group">
                                            <Col>
                                              <Label htmlFor="display_on_website" sm={5}><h6>Display on website:  </h6></Label>
                                              <FormControlLabel
                                                sm={2}
                                                // label="Display on Website"
                                                control={<Switch checked={displayEventState} onChange={changeEventDisplayState} />}
                                              />
                                            </Col>
                                          </Row>
                                          <Row className="form-group">
                                            <Col>
                                              {/* <Label htmlFor="assignees" ><h6>Assigned to: </h6></Label> */}
                                              <InputLabel id="demo-simple-select-outlined-label">
                                                member
                                              </InputLabel>
                                              <Select
                                                labelId="demo-simple-select-outlined-label"
                                                id="demo-simple-select-outlined"
                                                value={eventMember}
                                                onChange={changeEventMember}
                                                // labelWidth={labelWidth}
                                              >
                                                <MenuItem value="">
                                                  <em>None</em>
                                                </MenuItem>
                                                {
                                                  dumUsers.filter((user) => user.privelege_level !== 'Unapproved_User')
                                                  .map((user) => {
                                                    return(
                                                      <MenuItem value={user.name}>{user.name}</MenuItem>
                                                    )
                                                  })
                                                }
                                              </Select>
                                            </Col>
                                          </Row>
                                        </LocalForm>
                                      </CardFooter>
                                    </Card>
                                      <Row className="form-group">
                                        <Col sm={{ size: 4, offset: 3 }}>
                                          <Button color="primary" onClick={() => submitEventChanges(index)}>
                                            Save Changes
                                          </Button>
                                        </Col>
                                        <Col sm={{ size: 2 }}>
                                          <Button color="primary" onClick={handleEventModalClose}>
                                            Cancel
                                          </Button>
                                        </Col>
                                      </Row>
{this.state.urlFields.map((urlField, index) => (
                    <Fragment key={`${urlField}~${index}`}>
                      <Row className="form-group">
                        {/* sm={12} md={{ size: 4, offset: 1 }} */}
                        <Col sm={12} md={{ size: 4, offset: 1 }}>
                          <TextField
                            label="type"
                            // className="form-control"
                            // className={classes.urlField}
                            id="type"
                            name="type"
                            variant="filled"
                            value={urlField.type}
                            onChange={event => this.handleUrlFieldChange(index, event)}
                          />
                        </Col>
                        {/* sm={12} md={4} */}
                        <Col sm={12} md={4}>
                          <TextField
                            label="url"
                            // className="form-control"
                            // className={classes.urlField}
                            id="url"
                            name="url"
                            variant="filled"
                            value={urlField.url}
                            onChange={event => this.handleUrlFieldChange(index, event)}
                          />
                        </Col>
                        {/* sm={2} */}
                        <Col md={2}>
                          <Fab size="small" aria-label="delete" onClick={() => this.handleRemoveUrlFields(index)}>
                            <DeleteOutlinedIcon />
                          </Fab>
                        </Col>
                      </Row>
                    </Fragment>
                  ))}
                changeInternalName = (event) => {
      this.setState({
        ...this.state,
        internal_name: event.target.value,
      });
    };

    changeDirectoryYear = (event) => {
      this.setState({
        ...this.state,
        directory_year: event.target.value,
      });
    };

    changeSubDirectory = (event) => {
      this.setState({
        ...this.state,
        subdirectory: event.target.value,
      });
    };

    changeName = (event) => {
      this.setState({
        ...this.state,
        name: event.target.value,
      });
    };

    changeArchiveState = (event) => {
      this.setState({
        ...this.state,
        archive: event.target.checked,
      });
    };

    changeDescription = (event) => {
      this.setState({
        ...this.state,
        description: event.target.value,
      });
    };

    changeUrl = (event) => {
      this.setState({
        ...this.state,
        url: event.target.value,
      });
    };

    changeNewState = (event) => {
      this.setState({
        ...this.state,
        new: event.target.checked,
      });
    };

    changeDisplayState = (event) => {
      this.setState({
        ...this.state,
        display_on_website: event.target.checked,
      });
    };